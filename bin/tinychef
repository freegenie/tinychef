#!/usr/bin/env ruby

$LOAD_PATH.unshift File.expand_path(File.dirname(__FILE__) + '/../lib')

require 'optparse'
require 'tinychef'
require 'tinychef/commands'

parser = OptionParser.new do |opts|
  opts.banner = "Usage: tinychef COMMAND [ARGS]"

  opts.separator ""
  opts.separator "Options:"

  opts.on("-h", "--help", "Show this message") do
    puts opts
    exit
  end

  opts.separator ""
  opts.separator "Commands:"
  opts.separator "  new DIR                   Creates a new tinychef directory" 
  opts.separator "  boot HOST                 Prepares chef-able environment on HOST"
  opts.separator "  bag:create NAME           Creates an empty databag" 
  opts.separator "  bag:encrypt NAME          Encrypts a databag" 
  opts.separator "  bag:decrypt NAME          Decrypts a databag" 
  opts.separator "  key:generate              Generate a new random key"
  opts.separator "  key:lock                  Lock the key with a password"
  opts.separator "  key:unlock                Unlock the key for a work session" 
  opts.separator "  secure                    Remove all unsecure files from this folder" 
  opts.separator "  unsecure                  Unlock key and decrypt all data bags" 
  opts.separator "  run HOST NODE [RUN_LIST]  Runs recipes for NODE on HOST with optional run_list"
  opts.separator ""

end

parser.parse!

include Tinychef::Commands

begin
  case ARGV[0]
  when 'new' then new_command
  when 'boot' then boot_command
  when 'bag:create' then bag_create_command
  when 'bag:encrypt' then bag_encrypt_command
  when 'bag:decrypt' then bag_decrypt_command
  when 'key:generate' then key_generate_command
  when 'key:lock' then key_lock_command
  when 'key:unlock' then key_unlock_command
  when 'secure' then secure_command
  when 'unsecure' then unsecure_command
  when 'run' then run_command
  else
    puts parser.help
  end
rescue Tinychef::OptionsError, RuntimeError => e
  abort e.message
end
